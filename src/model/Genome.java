package model;
import java.util.ArrayList;

public class Genome {
  private final String huntingtons = "AATGGTTTCAAAGAGAGAGAATATTGCCACCCATCATTTATATCAGGCATGGGATCCTGTCCCTTCTCTGTCTCCGGCTACTACAGGTGCCCTCATCAGCCACGAGAAGCTGCTGCTACAGATCAACCCCGAGCGGGAGCTGGGGAGCATGAGCTACAAACTCGGCCAGGTGTCCATACACTCCGTGTGGCTGGGGAACAGCATCACACCCCTGAGGGAGGAGGAATGGGACGAGGAAGAGGAGGAGGAGGCCGACGCCCCTGCACCTTCGTCACCACCCACGTCTCCAGTCAACTCCAGGAAACACCGGGCTGGAGTTGACATCCACTCCTGTTCGCAGTTTTTGCTTGAGTTGTACAGCCGCTGGATCCTGCCGTCCAGCTCAGCCAGGAGGACCCCGGCCATCCTGATCAGTGAGGTGGTCAGATCCCTTCTAGTGGTCTCAGACTTGTTCACCGAGCGCAACCAGTTTGAGCTGATGTATGTGACGCTGACAGAACTGCGAAGGGTGCACCCTTCAGAAGACGAGATCCTCGCTCAGTACCTGGTGCCTGCCACCTGCAAGGCAGCTGCCGTCCTTGGGATGGACAAGGCCGTGGCGGAGCCTGTCAGCCGCCTGCTGGAGAGCACGCTCAGGAGCAGCCACCTGCCCAGCAGGGTTGGAGCCCTGCACGGCATCCTCTATGTGCTGGAGTGCGACCTGCTGGACGACACTGCCAAGCAGCTCATCCCGGTCATCAGCGACTATCTCCTCTCCAACCTGAAAGGGATCGCCCACTGCGTGAACATTCACAGCCAGCAGCACGTACTGGTCATGTGTGCCACTGCGTTTTACCTCATTGAGAACTATCCTCTGGACGTAGGGCCGGAATTTTCAGCATCAATAATACAGATGTGTGGGGTGATGCTGTCTGGAAGTGAGGAGTCCACCCCCTCCATCATTTACCACTGTGCCCTCAGAGGCCTGGAGCGCCTCCTGCTCTCTGAGCAGCTCTCCCGCCTGGATGCAGAATCGCTGGTCAAGCTGAGTGTGGACAGAGTGAACGTGCACAGCCCGCACCGGGCCATGGCGGCTCTGGGCCTGATGCTCACCTGCATGTACACAGGAAAGGAGAAAGTCAGTCCGGGTAGAACTTCAGACCCTAATCCTGCAGCCCCCGACAGCGAGTCAGTGATTGTTGCTATGGAGCGGGTATCTGTTCTTTTTGATAGGATCAGGAAAGGCTTTCCTTGTGAAGCCAGAGTGGTGGCCAGGATCCTGCCCCAGTTTCTAGACGACTTCTTCCCACCCCAGGACATCATGAACAAAGTCATCGGAGAGTTTCTGTCCAACCAGCAGCCATACCCCCAGTTCATGGCCACCGTGGTGTATAAGGTGTTTCAGACTCTGCACAGCACCGGGCAGTCGTCCATGGTCCGGGACTGGGTCATGCTGTCCCTCTCCAACTTCACGCAGAGGGCCCCGGTCGCCATGGCCACGTGGAGCCTCTCCTGCTTCTTTGTCAGCGCGTCCACCAGCCCGTGGGTCGCGGCGATCCTCCCACATGTCATCAGCAGGATGGGCAAGCTGGAGCAGGTGGACGTGAACCTTTTCTGCCTGGTCGCCACAGACTTCTACAGACACCAGATAGAGGAGGAGCTCGACCGCAGGGCCTTCCAGTCTGTGCTTGAGGTGGTTGCAGCCCCAGGAAGCCCATATCACCGGCTGCTGACTTGTTTACGAAATGTCCACAAGGTCACCACCTGCTGAGCGCCATGGTGGGAGAGACTGTGAGGCGGCAGCTGGGGCCGGAGCCTTTGGAAGTCTGTGCCCTTGTGCCCTGCCTCCACCGAGCCAGCTTGGTCCCTATGGGCTTCCGCACATGCCGCGGGCGGCCAGGCAACGTGCGTGTCTCTGCCATGTGGCAGAAGTGCTCTTTGTGGCAGTGGCCAGGCAGGGAGTGTCTGCAGTCCTGGTGGGGCTGAGCCTGAGGCCTTCCAGAAAGCAGGAGCAGCTGTGCTGCACCCCATGTGGGTGACCAGGTCCTTTCTCCTGATAGTCACCTGCTGGTTGTTGCCAGGTTGCAGCTGCTCTTGCATCTGGGCCAGAAGTCCTCCCTCCTGCAGGCTGGCTGTTGGCCCCTCTGCTGTCCTGCAGTAGAAGGTGCCGTGAGCAGGCTTTGGGAACACTGGCCTGGGTCTCCCTGGTGGGGTGTGCATGCCACGCCCCGTGTCTGGATGCACAGATGCCATGGCCTGTGCTGGGCCAGTGGCTGGGGGTGCTAGACACCCGGCACCATTCTCCCTTCTCTCTTTTCTTCTCAGGATTTAAAATTTAATTATATCAGTAAAGAGATTAATTTTAACGTAACTCTTTCTATGCCCGTGTAAAGTATGTGAATCGCAAGGCCTGTGCTGCATGCGACAGCGTCCGGGGTGGTGGACAGGGCCCCCGGCCACGCTCCCTCTCCTGTAGCCACTGGCATAGCCCTCCTGAGCACCCGCTGACATTTCCGTTGTACATGTTCCTGTTTATGCATTCACAAGGTGACTGGGATGTAGAGAGGCGTTAGTGGGCAGGTGGCCACAGCAGGACTGAGGACAGGCCCCCATTATCCTAGGGGTGCGCTCAACTGCAGCCCCTCCTCCTCGGGCACAGACGACTGTCGTTCTCCACCCACCAGTCAGGGACAGCAGCCTCCCTGTCACTCAGCTGAGAAGGCCAGCCCTCCCTGGCTGTGAGCAGCCTCCACTGTGTCCAGAGACATGGGCCTCCCACTCCTGTTCCTTGCTAGCCCTGGGGTGGCGTCTGCCTAGGAGCTGGCTGGCAGGTGTTGGGACCTGCTGCTCCATGGATGCATGCCCTAAGAGTGTCACTGAGCTGTGTTTTGTCTGAGCCTCTCTCGGTCAACAGCAAAGCTTGGTGTCTTGGCACTGTTAGTGACAGAGCCCAGCATCCCTTCTGCCCCCGTTCCAGCTGACATCTTGCACGGTGACCCCTTTTAGTCAGGAGAGTGCAGATCTGTGCTCATCGGAGACTGCCCCACGGCCCTGTCAGAGCCGCCACTCCTATCCCCAGGACAGGTCCCTGGACCAGCCTCCTGTTTGCAGGCCCAGAGGAGCCAAGTCATTAAAATGGAAGTGGATTCTGGATGGCCGGGCTGCTGCTGATGTAGGAGCTGGATTTGGGAGCTCTGCTTGCCGACTGGCTGTGAGACGAGGCAGGGGCTCTGCTTCCTCAGCCCTAGAGGCGAGCCAGGCAAGGTTGGCGACTGTCATGTGGCTTGGTTTGGTCATGCCCGTCGATGTTTTGGGTATTGAATGTGGTAAGTGGAGGAAATGTTGGAACTCTGTGCAGGTGCTGCCTTGAGACCCCCAAGCTTCCACCTGTCCCTCTCCTATGTGGCAGCTGGGGAGCAGCTGAGATGTGGACTTGTATGCTGCCCACATACGTGAGGGGGAGCTGAAAGGGAGCCCCTGCTCAAAGGGAGCCCCTCCTCTGAGCAGCCTCTGCCAGGCCTGTATGAGGCTTTTCCCACCAGCTCCCAACAGAGGCCTCCCCCAGCCAGGACCACCTCGTCCTCGTGGCGGGGCAGCAGGAGCGGTAGAAAGGGGTCCGATGTTTGAGGAGGCCCTTAAGGGAAGCTACTGAATTATAACACGTAAGAAAATCACCATTCTTCCGTATTGGTTGGGGGCTCCTGTTTCTCATCCTAGCTTTTTCCTGGAAAAGCCCGCTAGAAGGTTTGGGAACGAGGGGAAAGTTCTCAGAACTGTTGCTGCTCCCCACCCGCCTCCCGCCTCCCCCGCAGGTTATGTCAGCAGCTCTGAGACAGCAGTATCACAGGCCAGATGTTGTTCCTGGCTAGATGTTTACATTTGTAAGAAATAACACTGTGAATGTAAAACAGAGCCATTCCCTTGGAATGCATATCGCTGGGCTCAACATAGAGTTTGTCTTCCTCTTGTTTACGACGTGATCTAAACCAGTCCTTAGCAAGGGGCTCAGAACACCCCGCTCTGGCAGTAGGTGTCCCCCACCCCCAAAGACCTGCCTGTGTGCTCCGGAGATGAATATGAGCTCATTAGTAAAAATGACTTCACCCACGCATATACATAAAGTATCCATGCATGTGCATATAGACACATCTATAATTTTACACACACACCTCTCAAGACGGAGATGCATGGCCTCTAAGAGTGCCCGTGTCGGTTCTTCCTGGAAGTTGACTTTCCTTAGACCCGCCAGGTCAAGTTAGCCGCGTGACGGACATCCAGGCGTGGGACGTGGTCAGGGCAGGGCTCATTCATTGCCCACTAGGATCCCACTGGCGAAGATGGTCTCCATATCAGCTCTCTGCAGAAGGGAGGAAGACTTTATCATGTTCCTAAAAATCTGTGGCAAGCACCCATCGTATTATCCAAATTTTGTTGCAAATGTGATTAATTTGGTTGTCAAGTTTTGGGGGTGGGCTGTGGGGAGATTGCTTTTGTTTTCCTGCTGGTAATATCGGGAAAGATTTTAATGAAACCAGGGTAGAATTGTTTGGCAATGCACTGAAGCGTGTTTCTTTCCCAAAATGTGCCTCCCTTCCGCTGCGGGCCCAGCTGAGTCTATGTAGGTGATGTTTCCAGCTGCCAAGTGCTCTTTGTTACTGTCCACCCTCATTTCTGCCAGCGCATGTGTCCTTTCAAGGGGAAAATGTGAAGCTGAACCCCCTCCAGACACCCAGAATGTAGCATCTGAGAAGGCCCTGTGCCCTAAAGGACACCCCTCGCCCCCATCTTCATGGAGGGGGTCATTTCAGAGCCCTCGGAGCCAATGAACAGCTCCTCCTCTTGGAGCTGAGATGAGCCCCACGTGGAGCTCGGGACGGATAGTAGACAGCAATAACTCGGTGTGTGGCCGCCTGGCAGGTGGAACTTCCTCCCGTTGCGGGGTGGAGTGAGGTTAGTTCTGTGTGTCTGGTGGGTGGAGTCAGGCTTCTCTTGCTACCTGTGAGCATCCTTCCCAGCAGACATCCTCATCGGGCTTTGTCCCTCCCCCGCTTCCTCCCTCTGCGGGGAGGACCCGGGACCACAGCTGCTGGCCAGGGTAGACTTGGAGCTGTCCTCCAGAGGGGTCACGTGTAGGAGTGAGAAGAAGGAAGATCTTGAGAGCTGCTGAGGGACCTTGGAGAGCTCAGGATGGCTCAGACGAGGACACTCGCTTGCCGGGCCTGGCCCTCCTGGGAAGGAGGGAGCTGCTCAGAATGCCGCATGACAACTGAAGGCAACCTGGAAGGTTCAGGGCCCGCTCTTCCCCCATGTGCCTGTCACGCTCTGGTGCAGTCAAAGGAACGCCTTCCCCTCAGTTGTTTCTAAGAGCAGAGTCTCCCGCTGCAATCTGGGTGGTAACTGCCAGCCTTGGAGGATCGTGGCCAACGTGGACCTGCCTACGGAGGGTGGGCTCTGACCCAAGTGGGGCCTCCTTGCCCAGGTCTCACTGCTTTGCACCGTGGTCAGAGGGACTGTCAGCTGAGCTTGAGCTCCCCTGGAGCCAGCAGGGCTGTGATGGGCGAGTCCCGGAGCCCCACCCAGACCTGAATGCTTCTGAGAGCAAAGGGAAGGACTGACGAGAGATGTATATTTAATTTTTTAACTGCTGCAAACATTGTACATCCAAATTAAAGGGAAAAAATGGAAACCATCTAA";

  private String head;
  private String tail;
  private ArrayList<String> everyCodon = new ArrayList<>();
  private ArrayList<String> splitedGenome = new ArrayList<>();

  public Genome() {
    StringBuilder sb = new StringBuilder();
    int atBase = 1;
    for (char c : huntingtons.trim().toCharArray()) {
      sb.append(c);
      if (atBase == 3 && !everyCodon.contains(sb.toString())) {
        System.out.println("New codon: " + sb.toString());
        everyCodon.add(sb.toString());
        splitedGenome.add(sb.toString());
        sb = new StringBuilder();
        atBase = 1;
      } else if (atBase == 3) {
        System.out.println("Appending codon " + sb.toString());
        splitedGenome.add(sb.toString());
        sb = new StringBuilder();
        atBase = 1;
      } else atBase++;
    }
    sb = null;
    head = everyCodon.get(0);
    tail = splitedGenome.get(splitedGenome.size() - 1);
    System.out.println("------------------------------------------------\n\n\n");
  }

  public void

  public ArrayList<String> getEveryCodon() {
    return everyCodon;
  }

  public String getHead() {
    return head;
  }

  public String getTail() {
    return tail;
  }
}
